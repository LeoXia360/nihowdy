{"version":3,"sources":["img/slideshow/pic2.jpg","home/Homepage.js","about/About.js","common/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","src","pic2","alt","className","React","Component","theme","createMuiTheme","palette","primary","main","secondary","Navbar","ThemeProvider","AppBar","elevation","Toolbar","IconButton","aria-label","href","color","Button","target","App","rel","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,uPCgB5BC,G,6KAVX,OACE,6BACE,6BACE,yBAAKC,IAAKC,IAAMC,IAAI,MAAMC,UAAU,gB,GALvBC,IAAMC,Y,WCDTD,IAAMC,U,gECEpBC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cA0BGE,E,uKAnBX,OACE,6BACE,kBAACC,EAAA,EAAD,CAAeP,MAAOA,GACpB,kBAACQ,EAAA,EAAD,CAAQC,UAAW,GACjB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,aAAW,OAAOC,KAAK,IAAIC,MAAM,aAC3C,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAQF,KAAK,wCAAwCG,OAAO,SAASF,MAAM,aAA3E,QACA,kBAACC,EAAA,EAAD,CAAQF,KAAK,oCAAoCG,OAAO,SAASF,MAAM,aAAvE,YACA,kBAACC,EAAA,EAAD,CAAQF,KAAK,6BAA6BG,OAAO,SAASF,MAAM,aAAhE,gB,GAZOhB,IAAMC,W,MCuBZkB,MA7Bf,WACE,OACE,6BACE,8BACE,0BAAMC,IAAI,aAAaL,KAAK,gFAC5B,0BAAMK,IAAI,aAAaL,KAAK,6DAE9B,8BACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,UACV,6BACE,yCAGJ,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UAKR,kBAAC,EAAD,SCrBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb79c65a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic2.4b2dddd6.jpg\";","import React from 'react';\nimport pic2 from '../img/slideshow/pic2.jpg';\nimport \"./homepage.css\";\n\nclass Homepage extends React.Component {\n  render() {\n    return(\n      <div>\n        <div>\n          <img src={pic2} alt=\"leo\" className=\"photo\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;\n","import React from 'react';\nimport { Paper } from '@material-ui/core';\n\nclass About extends React.Component {\n  render() {\n    return(\n      <div>\n        <h1>LEO XIA</h1>\n        <Paper variant=\"outlined\">\n        </Paper>\n      </div>\n    )\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport {AppBar, Toolbar, Button, ThemeProvider, IconButton} from '@material-ui/core';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#b28c47',\n    },\n    secondary: {\n      main: \"#fff9ef\",\n    },\n  },\n});\n\nclass Navbar extends React.Component {\n  render() {\n    return(\n      <div>\n        <ThemeProvider theme={theme}>\n          <AppBar elevation={0}>\n            <Toolbar>\n              <IconButton aria-label=\"home\" href=\"/\" color=\"secondary\">\n                <HomeIcon />\n              </IconButton>\n              <Button href=\"https://www.linkedin.com/in/leoxia96/\" target=\"_blank\" color=\"secondary\">Work</Button>\n              <Button href=\"https://www.instagram.com/c3pleo/\" target=\"_blank\" color=\"secondary\">Personal</Button>\n              <Button href=\"https://medium.com/@c3pleo\" target=\"_blank\" color=\"secondary\">Blog</Button>\n            </Toolbar>\n          </AppBar>\n        </ThemeProvider>\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Homepage from './home/Homepage';\nimport About from './about/About';\nimport Navbar from './common/Navbar';\nimport { Paper } from '@material-ui/core';\n\n\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <div>\n      <head>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n      </head>\n      <body>\n        <Router>\n          <div>\n            <Navbar/>\n            <Switch>\n              <Route path=\"/about\">\n                <div>\n                  <h1>LEO XIA</h1>\n                </div>\n              </Route>\n              <Route path=\"/\">\n                <Homepage />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n        <Navbar/>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}